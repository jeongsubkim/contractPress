{"ast":null,"code":"/**\n * {\n *  name : 日本語名\n *  required : 必須項目\n *  requiredCondition : 条件府必須項目の関数\n *  nullMsg : nullの場合のエラーメッセージ\n *  type : バリデーションタイプ\n *  typeErrMsg : typeエラーの場合のエラーメッセージ\n *  digits : 桁数\n *  digitsErrMsg : 桁数エラーの場合のエラーメッセージ\n *  element : 入力エレメント(select, text, checkbox, radio, textarea)\n *  isChild : 下部オブジェクト\n *  excludeBlank : 下部オブジェクトの値が何もない場合除外\n * }\n */\n\nexport const ErrorCollector = {\n  init: function (structure) {\n    var result = {};\n    Object.keys(structure).forEach(function (key) {\n      var isParent = structure[key];\n      console.log(isParent);\n      if (isParent === 'parent') {\n        result[key] = this.makeValidObject(key);\n      }\n    });\n    for (var i = 0; i < structure.length; i++) {\n      result[structure[i]] = this.makeValidObject(structure[i]);\n    }\n    return result;\n  },\n  makeValidObject: function (beanName) {\n    var bean = this[beanName];\n    Object.keys(bean).forEach(function (key) {\n      var newBean = bean[key];\n      var endingWord = '';\n      var typeWord = '';\n      //set ending word\n      if (newBean.element === 'text') {\n        endingWord = '入力してください。';\n      } else if (newBean.element === 'select' || newBean.element === 'radio') {\n        endingWord = '選択してください。';\n      } else if (newBean.element === 'checkbox') {\n        endingWord = 'チェックしてください。';\n      }\n      //set nullMsg\n      if (newBean.required === 'condition') {} else if (newBean.required) {\n        newBean.nullMsg = newBean.name + 'を' + endingWord;\n      }\n      //set typeErrMsg\n      if (newBean.type) {\n        if (newBean.type === 'eng') {\n          typeWord = '英語で';\n        } else if (newBean.type === 'number') {\n          typeWord = '数字で';\n        }\n        newBean.typeErrMsg = newBean.name + 'は' + typeWord + endingWord;\n      }\n      //set digitErrMsg\n      if (newBean.digits) {\n        newBean.digitsErrMsg = newBean.name + 'は' + newBean.digits + '桁以内で' + endingWord;\n      }\n      bean[key] = newBean;\n    });\n    return bean;\n  },\n  MTable: {\n    tableName: {\n      name: 'テーブル名 - 論理名',\n      required: true,\n      digits: 30,\n      element: 'text'\n    },\n    tableNameJp: {\n      name: 'テーブル名 - 物理名',\n      required: true,\n      type: 'eng',\n      digits: 30,\n      element: 'text'\n    },\n    tableComment: {\n      name: 'コメント',\n      digits: 80,\n      element: 'text'\n    },\n    mTableColumn: {\n      isChild: 'MTableColumn',\n      excludeBlank: true\n    }\n  },\n  MTableColumn: {\n    tableColumnName: {\n      name: 'コラム - 論理名',\n      required: true,\n      digits: 30,\n      element: 'text'\n    },\n    tableColumnNameJp: {\n      name: 'コラム - 物理名',\n      required: true,\n      digits: 30,\n      type: 'eng',\n      element: 'text'\n    },\n    tableColumnType: {\n      name: 'コラム - タイプ',\n      required: true,\n      element: 'select'\n    },\n    tableColumnDigits: {\n      name: 'コラム - 桁数',\n      required: 'condition',\n      requiredCondition: function (columnType) {\n        if (columnType === '') {\n          return true;\n        } else {\n          return false;\n        }\n      },\n      requiredConditionParameter: 'tableColumnType',\n      type: 'number',\n      digits: 4,\n      element: 'text'\n    },\n    tableColumnIsPk: {\n      element: 'checkbox'\n    },\n    tableColumnIsFk: {\n      element: 'checkbox'\n    },\n    tableColumnIsNn: {\n      element: 'checkbox'\n    },\n    tableColumnIsAi: {\n      element: 'checkbox'\n    },\n    tableColumnDefault: {\n      name: 'コラム - デフォルト',\n      digits: 40,\n      element: 'text'\n    }\n  }\n};","map":{"version":3,"names":["ErrorCollector","init","structure","result","Object","keys","forEach","key","isParent","console","log","makeValidObject","i","length","beanName","bean","newBean","endingWord","typeWord","element","required","nullMsg","name","type","typeErrMsg","digits","digitsErrMsg","MTable","tableName","tableNameJp","tableComment","mTableColumn","isChild","excludeBlank","MTableColumn","tableColumnName","tableColumnNameJp","tableColumnType","tableColumnDigits","requiredCondition","columnType","requiredConditionParameter","tableColumnIsPk","tableColumnIsFk","tableColumnIsNn","tableColumnIsAi","tableColumnDefault"],"sources":["C:/Users/N22082302/react-cap/jstest/react/cap-react/src/admin/common/ErrorCollector.js"],"sourcesContent":["/**\n * {\n *  name : 日本語名\n *  required : 必須項目\n *  requiredCondition : 条件府必須項目の関数\n *  nullMsg : nullの場合のエラーメッセージ\n *  type : バリデーションタイプ\n *  typeErrMsg : typeエラーの場合のエラーメッセージ\n *  digits : 桁数\n *  digitsErrMsg : 桁数エラーの場合のエラーメッセージ\n *  element : 入力エレメント(select, text, checkbox, radio, textarea)\n *  isChild : 下部オブジェクト\n *  excludeBlank : 下部オブジェクトの値が何もない場合除外\n * }\n */\n\nexport const ErrorCollector = {\n    init : function(structure){\n        var result = {};\n        Object.keys(structure).forEach(function(key){\n            var isParent = structure[key];\n            console.log(isParent);\n            if(isParent === 'parent'){\n                result[key] = this.makeValidObject(key);\n            }\n        })\n        for(var i = 0; i < structure.length; i++){\n            result[structure[i]] = this.makeValidObject(structure[i]);\n        }\n        return result;\n    },\n    makeValidObject : function(beanName){\n        var bean = this[beanName];\n        Object.keys(bean).forEach(function(key){\n            var newBean = bean[key];\n            var endingWord = '';\n            var typeWord = '';\n            //set ending word\n            if(newBean.element === 'text'){\n                endingWord = '入力してください。';\n            }else if(newBean.element === 'select' || newBean.element === 'radio'){\n                endingWord = '選択してください。';\n            }else if(newBean.element === 'checkbox'){\n                endingWord = 'チェックしてください。';\n            }\n            //set nullMsg\n            if(newBean.required === 'condition'){\n\n            }else if(newBean.required){\n                newBean.nullMsg = newBean.name + 'を' + endingWord;\n            }\n            //set typeErrMsg\n            if(newBean.type){\n                if(newBean.type === 'eng'){\n                    typeWord = '英語で';\n                }else if(newBean.type === 'number'){\n                    typeWord = '数字で';\n                }\n                newBean.typeErrMsg = newBean.name + 'は' + typeWord + endingWord;\n            }\n            //set digitErrMsg\n            if(newBean.digits){\n                newBean.digitsErrMsg = newBean.name + 'は' + newBean.digits + '桁以内で' + endingWord;\n            }\n            bean[key] = newBean;\n        })\n        return bean;\n    },\n    MTable : {\n        tableName : {\n            name : 'テーブル名 - 論理名',\n            required : true,\n            digits : 30,\n            element : 'text'\n        },\n        tableNameJp : {\n            name : 'テーブル名 - 物理名',\n            required : true,\n            type : 'eng',\n            digits : 30,\n            element : 'text'\n        },\n        tableComment : {\n            name : 'コメント',\n            digits : 80,\n            element : 'text'\n        },\n        mTableColumn : {\n            isChild : 'MTableColumn',\n            excludeBlank : true\n        }\n    },\n    MTableColumn : {\n        tableColumnName: {\n            name : 'コラム - 論理名',\n            required : true,\n            digits : 30,\n            element : 'text'\n        },\n        tableColumnNameJp: {\n            name : 'コラム - 物理名',\n            required : true,\n            digits : 30,\n            type : 'eng',\n            element : 'text'\n        },\n        tableColumnType: {\n            name : 'コラム - タイプ',\n            required : true,\n            element : 'select'\n        },\n        tableColumnDigits: {\n            name : 'コラム - 桁数',\n            required : 'condition',\n            requiredCondition : function(columnType){\n                if(columnType === ''){\n                    return true;\n                }else{\n                    return false;\n                }\n            },\n            requiredConditionParameter : 'tableColumnType',\n            type : 'number',\n            digits : 4,\n            element : 'text'\n        },\n        tableColumnIsPk: {\n            element : 'checkbox'\n        },\n        tableColumnIsFk: {\n            element : 'checkbox'\n        },\n        tableColumnIsNn: {\n            element : 'checkbox'\n        },\n        tableColumnIsAi: {\n            element : 'checkbox'\n        },\n        tableColumnDefault: {\n            name: 'コラム - デフォルト',\n            digits : 40,\n            element : 'text'\n        }\n    }\n    \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}